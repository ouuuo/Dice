# 基础缓存 配置
# 用于缓存的本地磁盘目录是 /tmp/openresty
# levels 在 /tmp/openresty 设置了一个两级层次结构的目录。将大量的文件放置在单个目录中会导致文件访问缓慢，所以针对大多数部署，推荐使用两级目录层次结构。如果 levels 参数没有配置，则 Nginx 会将所有的文件放到同一个目录中。
# keys_zone 设置一个共享内存区，该内存区用于存储缓存键和元数据，有些类似计时器的用途。将键的拷贝放入内存可以使 Nginx 在不检索磁盘的情况下快速决定一个请求是 HIT 还是 MISS，这样大大提高了检索速度。一个 1MB 的内存空间可以存储大约 8000 个 key
# max_size 设置了缓存的上限（这里是1G）。这是一个可选项；如果不指定具体值，那就是允许缓存不断增长，占用所有可用的磁盘空间。当缓存达到这个上限，处理器便调用 cache manager 来移除最近最少被使用的文件，这样把缓存的空间降低至这个限制之下。
# inactive 指定了项目在不被访问的情况下能够在内存中保持的时间。如果一个文件在规定分钟之内没有被请求，则缓存管理将会自动将其在内存中删除，不管该文件是否过期。该参数默认值为 10 分钟（10m）。注意，非活动内容有别于过期内容。Nginx 不会自动删除由缓存控制头部指定的过期内容（本例中 Cache-Control:max-age=120）。过期内容只有在 inactive 指定时间内没有被访问的情况下才会被删除。如果过期内容被访问了，那么 Nginx 就会将其从原服务器上刷新，并更新对应的 inactive 计时器。
# Nginx 最初会将注定写入缓存的文件先放入一个临时存储区域，use_temp_path=off 命令指示 Nginx 将在缓存这些文件时将它们写入同一个目录下。我们强烈建议你将参数设置为 off 来避免在文件系统中不必要的数据拷贝。use_temp_path 在 Nginx 1.7 版本和 Nginx Plus R6 中有所介绍。
proxy_cache_path /tmp levels=1:2 keys_zone=my_cache:1m max_size=1g inactive=600m use_temp_path=off;

server {
	    listen 80;
        server_name localhost;
        #ssl_certificate       /data/dice.crt;
        #ssl_certificate_key   /data/dice.key;
        # ssl_protocols         TLSv1.3;
        # ssl_ciphers           TLS13-AES-256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-128-GCM-SHA256:TLS13-AES-128-CCM-8-SHA256:TLS13-AES-128-CCM-SHA256:EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+ECDSA+AES128:EECDH+aRSA+AES128:RSA+AES128:EECDH+ECDSA+AES256:EECDH+aRSA+AES256:RSA+AES256:EECDH+ECDSA+3DES:EECDH+aRSA+3DES:RSA+3DES:!MD5;
        charset utf-8;

        location / {
            # proxy_cache 命令启动缓存那些 URL 与 location 部分匹配的内容。同样可以将 proxy_cache 命令添加到 server 部分，这将会将缓存应用到所有的那些 location 中未指定自己的 proxy_cache 命令的服务中。
            proxy_cache my_cache;
            # 当 Nginx 收到服务器返回的 error，timeout 或者其他指定的 5xx 错误，并且在其缓存中有请求文件的陈旧版本，则会将这些陈旧版本的文件而不是错误信息发送给客户端。
            proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
            # 设置同一链接请求达到几次即被缓存，默认值为 1 。
            proxy_cache_min_uses 1;
            # Nginx 在刷新来自服务器的内容时使用 GET 请求。如果客户端的请求项已经被缓存过了，但是在缓存控制头部中定义为过期，那么 Nginx 就会在 GET 请求中包含 If-Modified-Since 字段，发送至服务器端。这项配置可以节约带宽，因为对于 Nginx 已经缓存过的文件，服务器只会在该文件请求头中 Last-Modified 记录的时间内被修改时才将全部文件一起发送。
            proxy_cache_revalidate on;
            # 当多个客户端请求一个缓存中不存在的文件（或称之为一个 MISS），只有这些请求中的第一个被允许发送至服务器。其他请求在第一个请求得到满意结果之后在缓存中得到文件。如果不启用 proxy_cache_lock，则所有在缓存中找不到文件的请求都会直接与服务器通信。
            proxy_cache_lock on;
            proxy_pass   http://dice-front:3000/; #dice-front nuxt项目 监听端口
            index  index.html index.htm;
        }

        location /v1/api/one_auth/ {
			proxy_set_header   X-Real-IP $remote_addr; #转发用户IP
            proxy_pass http://dice-openresty:88; #dice-openresty
        }

        location /v1/api/ {
            header_filter_by_lua_file 'lua/handle_cors.lua';
            access_by_lua_file 'lua/auth_check.lua';
            proxy_pass http://dice-server:9091; #dice-server
            proxy_set_header X-Real-IP $remote_addr; #转发用户IP
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
        }

        location /media/ {
            proxy_set_header   X-Real-IP $remote_addr; #转发用户IP
            proxy_pass http://dice-server:9091; #dice-server 资源文件
        }

        location /admin/ {
            proxy_pass   http://dice-openresty:3001/; #dice-admin
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/local/openresty/nginx/html;
        }

    }

server {
    listen 88;
    server_name localhost;
    location = /v1/api/one_auth/get_user_info {
        set $target_url '';
        add_header 'Access-Control-Allow-Origin' "$http_origin";
        add_header 'Access-Control-Allow-Credentials' "true";
        header_filter_by_lua_file 'lua/handle_cors.lua';
        access_by_lua_file 'lua/login_check.lua';
        if ($request_method = "OPTIONS") {
            add_header 'Access-Control-Allow-Origin' "$http_origin";
            add_header 'Access-Control-Allow-Credentials' "true";
            add_header 'Access-Control-Max-Age' 86400;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE';
            add_header 'Access-Control-Allow-Headers' 'reqid, nid, host, x-real-ip, x-forwarded-ip, event-type, event-id, accept, content-type';
            add_header 'Content-Length' 0;
            add_header 'Content-Type' 'text/plain, charset=utf-8';
            return 204;
        }
        content_by_lua_file 'lua/get_user_info.lua';
    }

    location = /v1/api/one_auth/get_group_info  {
        set $target_url '';
        add_header 'Access-Control-Allow-Origin' "$http_origin";
        add_header 'Access-Control-Allow-Credentials' "true";
        header_filter_by_lua_file 'lua/handle_cors.lua';
        access_by_lua_file 'lua/login_check.lua';
        if ($request_method = "OPTIONS") {
            add_header 'Access-Control-Allow-Origin' "$http_origin";
            add_header 'Access-Control-Allow-Credentials' "true";
            add_header 'Access-Control-Max-Age' 86400;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE';
            add_header 'Access-Control-Allow-Headers' 'reqid, nid, host, x-real-ip, x-forwarded-ip, event-type, event-id, accept, content-type';
            add_header 'Content-Length' 0;
            add_header 'Content-Type' 'text/plain, charset=utf-8';
            return 204;
        }
        content_by_lua_file 'lua/get_group_info.lua';
    }

    # location = /auth/get_content_list  {
    #     set $target_url '';
    #     add_header 'Access-Control-Allow-Origin' "$http_origin";
    #     add_header 'Access-Control-Allow-Credentials' "true";
    #     header_filter_by_lua_file 'lua/handle_cors.lua';
    #     access_by_lua_file 'lua/login_check.lua';
    #     if ($request_method = "OPTIONS") {
    #         add_header 'Access-Control-Allow-Origin' "$http_origin";
    #         add_header 'Access-Control-Allow-Credentials' "true";
    #         add_header 'Access-Control-Max-Age' 86400;
    #         add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE';
    #         add_header 'Access-Control-Allow-Headers' 'reqid, nid, host, x-real-ip, x-forwarded-ip, event-type, event-id, accept, content-type';
    #         add_header 'Content-Length' 0;
    #         add_header 'Content-Type' 'text/plain, charset=utf-8';
    #         return 204;
    #     }
    #     content_by_lua_file 'lua/get_content_list.lua';
    # }

}

server {
        listen       3001;
        server_name localhost;
        charset utf-8;

        location / {
           root   /usr/local/openresty/nginx/html/dice-admin;
           try_files $uri $uri/ /index.html;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
    }